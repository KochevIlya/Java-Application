package com.example.javaapplication;import lombok.SneakyThrows;import javax.swing.*;import java.awt.*;import java.awt.event.*;import javax.swing.border.Border;import javax.xml.bind.JAXBException;import java.io.File;import java.io.FileReader;import java.io.IOException;public class Main implements ActionListener {    JFrame frame;    JComboBox<String> versionChooser;    JComboBox<String> actionChooser1;    JComboBox<String> actionChooser2;    JPanel panel1;    JPanel panel2;    JPanel panel3;    JPanel panel4;    JPanel panel5;    JPanel textAreasPanel;    JLabel label;    JTextArea preTextArea;    JTextArea postTextArea;    JScrollPane scroll;    JButton chooseInputButton;    JTextField chooseOutputButton;    //    JButton submitButton;    JButton submitButton1;    JButton calcButton;    JButton encButton;    JButton archButton;    Font myFont = new Font("Cascadia Code", Font.PLAIN, 16);    Font myFontLittle = new Font("Cascadia Code", Font.PLAIN, 13);    int counter = 0;    String readerName;    String writerName;    Result result = new Result();    Decider decider = new Decider();    Finder finder = new Finder();    Calculator calculator = new Calculator();    Replacer replacer = new Replacer();    Reader reader;    Writer writer;    File inputFile;    File outputFile;    Main() {        frame = new JFrame("Java Application");        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        frame.setSize(new Dimension(800, 400));        frame.setLayout(new BorderLayout());        frame.setLocationRelativeTo(null);        panel1 = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 5));        panel2 = new JPanel();        panel2.setLayout(new GridBagLayout());        panel3 = new JPanel(new GridBagLayout());        panel4 = new JPanel(new GridBagLayout());        panel5 = new JPanel(new GridBagLayout());        panel1.setPreferredSize(new Dimension(100, 80));        panel2.setPreferredSize(new Dimension(200, 100));        panel3.setPreferredSize(new Dimension(300, 100));        panel4.setPreferredSize(new Dimension(100, 45));        panel5.setPreferredSize(new Dimension(200, 100));        frame.add(panel1, BorderLayout.NORTH);        frame.add(panel2, BorderLayout.WEST);        frame.add(panel3, BorderLayout.EAST);        frame.add(panel4, BorderLayout.SOUTH);        frame.add(panel5, BorderLayout.CENTER);        String[] versions = {"Version 1", "Version 2"};        versionChooser = new JComboBox<>(versions);        versionChooser.setPreferredSize(new Dimension(200, 40));        versionChooser.setFont(myFont);        String[] actions = {"Archive", "Encrypt", "Archive -> Encrypt", "Encrypt -> Archive", "Do nothing"};        actionChooser1 = new JComboBox<>(actions);        actionChooser1.setPreferredSize(new Dimension(100, 40));        actionChooser1.setFont(myFont);        actionChooser1.setBorder(BorderFactory.createLineBorder( Color.BLUE, 2));        actionChooser1.addItemListener(new ItemListener() {            @Override            public void itemStateChanged(ItemEvent e) {                if (e.getStateChange() == ItemEvent.SELECTED) {                    String selectedOption = (String) actionChooser1.getSelectedItem();                    if(selectedOption.equals("Encrypt")){                        JDialog dialog = new JDialog();                        dialog.setLayout(new GridBagLayout());                        dialog.setSize(new Dimension(450, 450));                        dialog.setLocationRelativeTo(null);                        JPanel panel = new JPanel(new GridLayout(0, 1, 20, 20));                        panel.setPreferredSize(new Dimension(260, 270));                        JButton encryptWithYourKey = new JButton("Encrypt with your key");                        encryptWithYourKey.setOpaque(true);                        JButton encryptWithGeneratedKey = new JButton("Encrypt with generated key");                        //encryptWithYourKey.setPreferredSize(new Dimension(250, 45));                        //encryptWithGeneratedKey.setPreferredSize(new Dimension(250, 45));                        JTextField textField = new JTextField("Enter your key here...");                        textField.setForeground(Color.lightGray);                        textField.setFont(myFontLittle);                        textField.setSize(100, 100);                        panel.add(textField);                        textField.setVisible(false);                        JLabel textLabel = new JLabel("<html>/* After entering KEY click<br>'Encrypt with your key' */</html>");                        textLabel.setFont(myFontLittle);                        textLabel.setForeground(Color.gray);                        textLabel.setLabelFor(textField);                        textLabel.setVisible(false);                        encryptWithYourKey.addActionListener(new ActionListener() {                            @Override                            public void actionPerformed(ActionEvent e) {                                encryptWithGeneratedKey.setVisible(false);                                textField.setVisible(true);                            }                        });                        textField.addFocusListener(new FocusListener() {                            @Override                            public void focusGained(FocusEvent e) {                                textField.setText(null); // Empty the text field when it receives focus                                textField.setForeground(Color.black);                                textLabel.setVisible(true);                            }                            @Override                            public void focusLost(FocusEvent e) {                            }                        });                        panel.add(encryptWithGeneratedKey);                        panel.add(encryptWithYourKey);                        panel.add(textLabel);                        dialog.add(panel);                        dialog.setVisible(true);                        frame.setEnabled(false);                    }                }            }        });        JPanel submitPane = new JPanel(new GridLayout(0, 1, 0, 10));        JLabel submitLabel1 = new JLabel("Choose what to do with file:");        submitLabel1.setFont(myFont);        String[] deActions = {"DeArchive", "Decrypt", "DeArchive -> Decrypt", "Decrypt -> DeArchive", "Do nothing"};        actionChooser2 = new JComboBox<>(deActions);        actionChooser2.setPreferredSize(new Dimension(100, 40));        actionChooser2.setFont(myFont);        actionChooser2.setBorder(BorderFactory.createLineBorder( Color.BLUE, 2));        submitPane.add(submitLabel1);        submitPane.add(actionChooser2);//        submitPane.add(submitButton1);        submitPane.setBackground(Color.white);//        submitButton = new JButton("Submit!");//        submitButton.setPreferredSize(new Dimension(100, 40));//        submitButton.setFont(myFont);//        submitButton.setBorder(BorderFactory.createLineBorder( Color.BLUE, 2));        JLabel submitLabel = new JLabel("Choose what to do with file:");        submitLabel.setFont(myFont);        JPanel submitPanel = new JPanel(new GridLayout(0, 1, 0, 10));        submitPanel.add(submitLabel);        submitPanel.add(actionChooser1);//         submitPanel.add(submitButton);        submitPanel.setBackground(Color.white);        label = new JLabel("Choose Version :");        //label.setBounds(20, 20, 145, 50);        label.setFont(myFont);        JPanel submitAndReloadPane = new JPanel(new GridLayout(1, 0, 592, 10));        submitAndReloadPane.setBackground(Color.white);        JButton submitButton = new JButton("Submit!");        submitButton.setPreferredSize(new Dimension(100, 30));        submitButton.setFont(myFont);        submitButton.setBorder(BorderFactory.createLineBorder( Color.BLUE, 2));        JButton reloadButton = new JButton("Reload!");        reloadButton.setPreferredSize(new Dimension(100, 30));        reloadButton.setFont(myFont);        reloadButton.setOpaque(true);        reloadButton.setBorder(BorderFactory.createLineBorder( Color.BLUE, 2));        submitAndReloadPane.add(reloadButton);        submitAndReloadPane.add(submitButton);        panel4.add(submitAndReloadPane);        Border border = null;        panel1.setBorder(BorderFactory.createTitledBorder(border, "Step 0", 1, 2, myFont, Color.BLUE));        panel1.add(label);        panel1.add(versionChooser);        panel2.setBorder(BorderFactory.createTitledBorder(border, "Step 1", 1, 2, myFont, Color.BLUE));        panel3.add(submitPane);        panel3.setBorder(BorderFactory.createTitledBorder(border, "Step 3", 1, 2, myFont, Color.BLUE));        panel5.add(submitPanel);        panel5.setBorder(BorderFactory.createTitledBorder(border, "Step 2", 1, 2, myFont, Color.BLUE));        JPanel buttonPanel = new JPanel(new GridLayout(0, 1, 0, 20));        buttonPanel.setBackground(Color.white);        chooseInputButton = new JButton("File to read");        chooseInputButton.addActionListener(this);        chooseInputButton.setFont(myFont);        chooseInputButton.setBackground(Color.pink);        chooseInputButton.setOpaque(true);        chooseInputButton.setBorder(BorderFactory.createLineBorder( Color.BLUE, 2));        chooseInputButton.setFocusable(true);        chooseInputButton.setPreferredSize(new Dimension(180, 45));        chooseOutputButton = new JTextField();        chooseOutputButton.addActionListener(this);        chooseOutputButton.setFont(myFont);        chooseOutputButton.setBorder(BorderFactory.createLineBorder( Color.BLUE, 1));        //chooseOutputButton.setFocusable(true);        chooseOutputButton.setPreferredSize(new Dimension(180, 45));        JLabel chooseLabel = new JLabel(" File to write:");        chooseLabel.setFont(myFont);        chooseLabel.setLabelFor(chooseOutputButton);        submitButton1 = new JButton("Submit!");        submitButton1.addActionListener(this);        submitButton1.setPreferredSize(new Dimension(100, 45));        submitButton1.setFont(myFont);        submitButton1.setBackground(Color.pink);        submitButton1.setOpaque(true);        submitButton1.setBorder(BorderFactory.createLineBorder( Color.BLUE, 2));        buttonPanel.add(chooseInputButton);        buttonPanel.add(chooseLabel);        buttonPanel.add(chooseOutputButton);        buttonPanel.add(submitButton1);        panel2.add(buttonPanel);        calcButton = new JButton("Calculate!");        calcButton.addActionListener(this);        calcButton.setFont(myFont);        calcButton.setFocusable(true);        calcButton.setBounds(275, 20, 145, 50);        calcButton.setVisible(false);        panel1.setBackground(Color.white);        panel2.setBackground(Color.white);        panel3.setBackground(Color.white);        panel4.setBackground(Color.white);        panel5.setBackground(Color.white);        frame.setVisible(true);    }    public static void main(String[] args) throws JAXBException, IOException {        // launch();//        System.out.println("Добрый день, сэр! Готов к работе, сэр");//        char ch = 0;//        do {//            System.out.println("Введите имя входного файла, например(input.txt): ");////            InputStreamReader isr = new InputStreamReader(System.in);//            BufferedReader br = new BufferedReader(isr);////            String readerName;//            String writerName;//            Result result = new Result();////            try {//                readerName = br.readLine();////            } catch (IOException e) {//                System.out.println("Вы ввели неверное имя файла(, попробуйте заново");//                ch = '1';//                continue;//            }//            System.out.println("Введите имя выходного файла, например(output.txt): ");//            try {//                writerName = br.readLine();//            } catch (IOException e) {//                System.out.println("Вы ввели неверное имя файла(, попробуйте заново");//                ch = '1';//                continue;//            }////            try {//                Decider decider = new Decider();//                decider.makeDecision(readerName, writerName, result);//            } catch (Exception e) {//                System.exit(0);//            }//            Reader reader = new Reader(readerName);//            try {//                reader.read(result);//            }//            catch (Exception e)//            {//                ch = '1';//                continue;//            }////            Finder finder = new Finder();//            finder.find(result);//            try {//                Calculator calculator = new Calculator();//                calculator.calculate(result);//            } catch (Exception e) {//                System.exit(0);//            }//            Replacer replacer = new Replacer();//            replacer.replace(result);////            System.out.println("Введите 1, если хотите, чтобы ваши выходные данные были зашифрованы: ");//            boolean isEnc = false;//            try {//                String temp = br.readLine();//                if (Objects.equals(temp, "1")) {//                    result.setShouldEncrypt(true);//                    result.setFirstEncrypt(true);//                    isEnc = true;//                }//            } catch (IOException e) {//                System.out.println("Вы ввели некорректный символ(, попробуйте заново");//                ch = '1';//                continue;//            }////            System.out.println("Введите 1, если хотите, чтобы ваши выходные данные были заарохивированы: ");//            boolean isArch = false;//            try {//                String temp = br.readLine();//                if (Objects.equals(temp, "1")) {//                    result.setShouldArchive(true);//                    isArch = true;//                }//            } catch (IOException e) {//                System.out.println("Вы ввели некорректный символ(, попробуйте заново");//                ch = '1';//                continue;//            }////            if (isEnc && isArch) {//                System.out.println("Введите 1, если хотите, чтобы сначала данные были заархивированы, а затем зашифрованы: ");//                try {//                    String temp = br.readLine();//                    if (Objects.equals(temp, "1")) {//                        result.setFirstEncrypt(false);//                    }//                } catch (IOException e) {//                    System.out.println("Вы ввели некорректный символ(, попробуйте заново");//                    ch = '1';//                    continue;//                }//            }//////            Writer writer = new Writer(writerName);//            writer.write(result);//            System.out.println("Всё готово! проверьте выходной файл;)");//            System.out.println("Введите 1, если хотите продолжить: ");//            try//            {//                ch = (char) br.read();//            }//            catch (IOException e)//            {//                System.out.println("Вы ввели некорректный символ(");//                System.exit(0);//            }//        }//        while (ch == '1');//        System.exit(0);        //new MyFrame();        Main helloApplication = new Main();    }    @SneakyThrows    @Override    public void actionPerformed(ActionEvent e) {        if(e.getSource() == actionChooser1) {        }        if(e.getSource() == chooseInputButton) {            JFileChooser fileChooser = new JFileChooser();            fileChooser.setCurrentDirectory(new File("."));            int response = fileChooser.showOpenDialog(null);   // select file to open            if(response == JFileChooser.APPROVE_OPTION){                inputFile = fileChooser.getSelectedFile();                readerName = inputFile.getName();                chooseInputButton.setText("File is read!");//                try {//                    Desktop.getDesktop().open(file);//                } catch (IOException ex) {//                    throw new RuntimeException(ex);//                }//                System.out.println(fileName);                //Reader reader = new Reader(fileName);                //reader.readV2();            }            chooseInputButton.setText("File is read!");        }        if(e.getSource() == submitButton1) {            submitButton1.setText("Submitted!");        }        if(e.getSource() == chooseOutputButton) {            JFileChooser fileChooser1 = new JFileChooser();            fileChooser1.setCurrentDirectory(new File("."));            int response1 = fileChooser1.showSaveDialog(null);   // select file to open            if(response1 == JFileChooser.APPROVE_OPTION){                outputFile = fileChooser1.getSelectedFile();                writerName = outputFile.getName();                decider.makeDecision(readerName, writerName, result);                reader = new Reader(readerName);                //reader.division(result);                reader.readV2(result);                finder.findV2(result, readerName);                calculator.calculate(result);                replacer.replaceV2(result, readerName);                writer = new Writer(writerName);                writer.writeV2(result, readerName);                //preTextArea.setText(result.getInputText());//                try {//                    Desktop.getDesktop().open(file);//                } catch (IOException ex) {//                    throw new RuntimeException(ex);//                }//                System.out.println(fileName);                //Reader reader = new Reader(fileName);                //reader.readV2();            }            panel1.setVisible(false);            panel2.setVisible(false);            panel3.setVisible(false);            panel4.setVisible(false);            panel5.setVisible(false);            chooseInputButton.setVisible(false);            chooseOutputButton.setVisible(false);            textAreasPanel = new JPanel(new GridLayout());            preTextArea = new JTextArea(5,30);            FileReader fileReader = new FileReader(inputFile);            preTextArea.read(fileReader, null);            preTextArea.setFont(myFont);            JScrollPane pane = new JScrollPane(preTextArea, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);            postTextArea = new JTextArea(5,30);            FileReader fileReader1 = new FileReader(outputFile);            postTextArea.read(fileReader1, null);            postTextArea.setFont(myFont);            JScrollPane pane1 = new JScrollPane(postTextArea, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);            textAreasPanel.add(pane);            textAreasPanel.add(pane1);            frame.add(textAreasPanel);        }    }//        System.out.println("Добрый день, сэр! Готов к работе, сэр");//        char ch = 0;//        do {//            System.out.println("Выберите версию программы в соотвествии с форматом входных файлов\n Введите 2, если задан конкретный формат входных данных в файле\n Введите 1 иначе : ");////            InputStreamReader isr = new InputStreamReader(System.in);//            BufferedReader br = new BufferedReader(isr);////            String answ = br.readLine();//            System.out.println("Введите имя входного файла, например(input.txt): ");////            String readerName;//            String writerName;//            Result result = new Result();////            try {//                readerName = br.readLine();////            } catch (IOException e) {//                System.out.println("Вы ввели неверное имя файла(, попробуйте заново");//                ch = '1';//                continue;//            }//            System.out.println("Введите имя выходного файла, например(output.txt): ");//            try {//                writerName = br.readLine();//            } catch (IOException e) {//                System.out.println("Вы ввели неверное имя файла(, попробуйте заново");//                ch = '1';//                continue;//            }////            try {//                Decider decider = new Decider();//                decider.makeDecision(readerName, writerName, result);//            } catch (Exception e) {//                System.exit(0);//            }//            Reader reader = new Reader(readerName);//            try {//                if(Objects.equals(answ, "1")) {//                    reader.read(result);//                }//                else {//                    reader.readV2(result);//                }//            }//            catch (Exception e)//            {//                ch = '1';//                continue;//            }////            Finder finder = new Finder();//            if(Objects.equals(answ, "1")) {//                finder.find(result);//            }//            else {//                finder.findV2(result, readerName);//            }//            try {//                Calculator calculator = new Calculator();//                calculator.calculate(result);//            } catch (Exception e) {//                System.exit(0);//            }//            Replacer replacer = new Replacer();////            if(Objects.equals(answ, "1")) {//                replacer.replace(result);//            }//            else {//                replacer.replaceV2(result, readerName);//            }////            System.out.println("Введите 1, если хотите, чтобы ваши выходные данные были зашифрованы: ");//            boolean isEnc = false;//            try {//                String temp = br.readLine();//                if (Objects.equals(temp, "1")) {//                    result.setShouldEncrypt(true);//                    result.setFirstEncrypt(true);//                    isEnc = true;//                }//            } catch (IOException e) {//                System.out.println("Вы ввели некорректный символ(, попробуйте заново");//                ch = '1';//                continue;//            }////            System.out.println("Введите 1, если хотите, чтобы ваши выходные данные были заархивированы: ");//            boolean isArch = false;//            try {//                String temp = br.readLine();//                if (Objects.equals(temp, "1")) {//                    result.setShouldArchive(true);//                    isArch = true;//                }//            } catch (IOException e) {//                System.out.println("Вы ввели некорректный символ(, попробуйте заново");//                ch = '1';//                continue;//            }////            if (isEnc && isArch) {//                System.out.println("Введите 1, если хотите, чтобы сначала данные были заархивированы, а затем зашифрованы: ");//                try {//                    String temp = br.readLine();//                    if (Objects.equals(temp, "1")) {//                        result.setFirstEncrypt(false);//                    }//                } catch (IOException e) {//                    System.out.println("Вы ввели некорректный символ(, попробуйте заново");//                    ch = '1';//                    continue;//                }//            }//////            Writer writer = new Writer(writerName);//            writer.write(result);//            System.out.println("Всё готово! проверьте выходной файл;)");//            System.out.println("Введите 1, если хотите продолжить: ");//            try//            {//                ch = (char) br.read();//            }//            catch (IOException e)//            {//                System.out.println("Вы ввели некорректный символ(");//                System.exit(0);//            }//        }//        while (ch == '1');//        System.exit(0);}